aggdata$num_cyl[aggdata$cyl == 8] <- "8 cylinder"
# Se ordena el arreglo por el campo aggdata$cyl
aggdata <- aggdata[order(aggdata$cyl),]
barplot(aggdata$mpg, names.arg=aggdata$num_cyl)
#------------------------------------------------------------------------------#
# # Agrega el nombre a las filas del data set
# rownames(aggdata) <- c("4 cylinder", "6 cylinder","8 cylinder")
#
# # Se cambian las filas por columnas. Se transpone el data frame
#  transpor.aggdata <- t(aggdata[c("mpg")])
#
# barplot(transpor.aggdata,xlab="Number of cylinders", ylab = "Miles/US Gallon" )
# Encontrar la relacion entre cantidad de cilindros (cyl) que posee un carro y su consumo
# de gasolina (mpg)
#Agrupar los registros por cyl
data <- mtcars[c("cyl", "mpg")]
# Calcular la media de mpg agrupada por cyl
aggdata <-aggregate(data, by=list(Group.cyl=data$cyl), FUN=median, na.rm=TRUE)
#------------------------------------------------------------------------------#
# Se agrega la columna num_cyl para que contenta variable cuantitativa
aggdata$num_cyl[aggdata$cyl == 4] <- "4 cylinder"
aggdata$num_cyl[aggdata$cyl == 6] <- "6 cylinder"
aggdata$num_cyl[aggdata$cyl == 8] <- "8 cylinder"
# Se ordena el arreglo por el campo aggdata$cyl
aggdata <- aggdata[order(aggdata$cyl),]
barplot(aggdata$mpg, names.arg=aggdata$num_cyl, xlab="Number of cylinders", ylab = "Miles/US Gallon")
#------------------------------------------------------------------------------#
# # Agrega el nombre a las filas del data set
# rownames(aggdata) <- c("4 cylinder", "6 cylinder","8 cylinder")
#
# # Se cambian las filas por columnas. Se transpone el data frame
#  transpor.aggdata <- t(aggdata[c("mpg")])
#
# barplot(transpor.aggdata,xlab="Number of cylinders", ylab = "Miles/US Gallon" )
# Encontrar la relacion entre cantidad de cilindros (cyl) que posee un carro y su consumo
# de gasolina (mpg)
#Agrupar los registros por cyl
data <- mtcars[c("cyl", "mpg")]
# Calcular la media de mpg agrupada por cyl
aggdata <-aggregate(data, by=list(Group.cyl=data$cyl), FUN=median, na.rm=TRUE)
#------------------------------------------------------------------------------#
# Se agrega la columna num_cyl para que contenta variable cuantitativa
aggdata$num_cyl[aggdata$cyl == 4] <- "4 cylinder"
aggdata$num_cyl[aggdata$cyl == 6] <- "6 cylinder"
aggdata$num_cyl[aggdata$cyl == 8] <- "8 cylinder"
# Se ordena el arreglo por el campo aggdata$cyl
aggdata <- aggdata[order(aggdata$cyl),]
barplot(aggdata$mpg, names.arg=aggdata$num_cyl, xlab="Number of cylinders", ylab = "Miles/US Gallon")
#------------------------------------------------------------------------------#
# # Agrega el nombre a las filas del data set
# rownames(aggdata) <- c("4 cylinder", "6 cylinder","8 cylinder")
#
# # Se cambian las filas por columnas. Se transpone el data frame
#  transpor.aggdata <- t(aggdata[c("mpg")])
#
# barplot(transpor.aggdata,xlab="Number of cylinders", ylab = "Miles/US Gallon" )
mytable <- with(Arthritis, table(Improved))
Arthritis
library(vcd)
mytable <- with(Arthritis, table(Improved))
mytable
Arthritis
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
mytable
mytable <- table(Treatment, Improved)
library(vcd)
head(Arthritis)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable1 <- table(A, B)
library(vcd)
head(Arthritis)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable1 <- table(Treatment, Improved)
library(vcd)
head(Arthritis)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
library(vcd)
head(Arthritis)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
mytable1
library(vcd)
head(Arthritis)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
prop.table(mytable)*100
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
prop.table(mytable)*100
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
f <- factor(Improved)
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
f <- factor(Arthritis$Improved)
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
f <- factor(Arthritis$Improved)
f
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
lbls <- factor(Arthritis$Improved)
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
lbls <- factor(Arthritis$Improved, order = TRUE)
lbls
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
lbls <- factor(Arthritis$Improved, order = TRUE)
lbls
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE)
lbls
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = c("None","Some","Marked"), main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE, levels = c("None","Some","Marked"))
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE, levels = c("None","Some","Marked"))
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE, levels = c("None","Some","Marked"))
lbls
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE)
lbls
pie(slices, labels = lbls, main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = levels.default(lbls), main="Simple Pie Chart")
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = levels.default(lbls), main="Simple Pie Chart")
barplot(slices)
# TWO-WAY TABLES
# mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
# mytable1
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
# You can generate simple frequency counts using the table()
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
# Pie graph
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = levels.default(lbls), main="Simple Pie Chart")
# TWO-WAY TABLES
mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
mytable1
# xtabs() function allows you to create a contingency table using formula style input
# mytable <- xtabs(~ A + B, data=mydata). where A is the row variable, and B is the column variable
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
mytable
# You can generate marginal frequencies
margin.table(mytable, 1)
# You can generate marginal proportions
prop.table(mytable, 1)
# For column sums and column proportions, you have
margin.table(mytable, 2)
prop.table(mytable, 2)
# Cell proportions are obtained with this statement
prop.table(mytable)
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
# You can generate simple frequency counts using the table()
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
# Pie graph
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = levels.default(lbls), main="Simple Pie Chart")
# TWO-WAY TABLES
mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
mytable1
# xtabs() function allows you to create a contingency table using formula style input
# mytable <- xtabs(~ A + B, data=mydata). where A is the row variable, and B is the column variable
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
mytable
# You can generate marginal frequencies
margin.table(mytable, 1)
# You can generate marginal proportions
prop.table(mytable, 1)
# For column sums and column proportions, you have
margin.table(mytable, 2)
prop.table(mytable, 2)
# Cell proportions are obtained with this statement
prop.table(mytable)
source('~/Documents/Libros/R/R_ejercicios/R_in_action/DescriptiveStatistics/generate_frecuency_tables.r', echo=TRUE)
source('~/Documents/Libros/R/R_ejercicios/R_in_action/DescriptiveStatistics/generate_frecuency_tables.r', echo=TRUE)
source('~/Documents/Libros/R/R_ejercicios/R_in_action/DescriptiveStatistics/generate_frecuency_tables.r', echo=TRUE)
source('~/Documents/Libros/R/R_ejercicios/R_in_action/DescriptiveStatistics/generate_frecuency_tables.r', echo=TRUE)
Arthritis
source('~/Documents/Libros/R/R_ejercicios/R_in_action/DescriptiveStatistics/generate_frecuency_tables.r', echo=TRUE)
# In this section, we’ll look at frequency and contingency tables from categorical variables
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
# You can generate simple frequency counts using the table()
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
# Pie graph
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = levels.default(lbls), main="Simple Pie Chart")
# TWO-WAY TABLES
mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
mytable1
# xtabs() function allows you to create a contingency table using formula style input
# mytable <- xtabs(~ A + B, data=mydata). where A is the row variable, and B is the column variable
# Treatment and Improved are categorical variables
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
mytable
# You can generate marginal frequencies
margin.table(mytable, 1)
# You can generate marginal proportions
prop.table(mytable, 1)
# For column sums and column proportions, you have
margin.table(mytable, 2)
prop.table(mytable, 2)
# Cell proportions are obtained with this statement
prop.table(mytable)
# You can use the addmargins() function to add marginal sums to these tables
addmargins(mytable)
addmargins(prop.table(mytable))
# When using addmargins(), the default is to create sum margins for all variables in a table.
# In contrast: adds a sum column alone
addmargins(prop.table(mytable, 1), 2)
addmargins(prop.table(mytable, 2), 1)
# In this section, we’ll look at frequency and contingency tables from categorical variables
library(vcd)
head(Arthritis)
options(digits=2)
# ONE-WAY TABLES
# You can generate simple frequency counts using the table()
mytable <- with(Arthritis, table(Improved))
mytable
# You can turn these frequencies into proportions
prop.table(mytable)
# Into percentages
slices <- prop.table(mytable)*100
slices
# Pie graph
lbls <- factor(Arthritis$Improved, order = TRUE)
pie(slices, labels = levels.default(lbls), main="Simple Pie Chart")
# TWO-WAY TABLES
mytable1 <- table(Arthritis$Treatment, Arthritis$Improved)
mytable1
# xtabs() function allows you to create a contingency table using formula style input
# mytable <- xtabs(~ A + B, data=mydata). where A is the row variable, and B is the column variable
# Treatment and Improved are categorical variables
mytable <- xtabs(~ Treatment+Improved, data=Arthritis)
mytable
# You can generate marginal frequencies
margin.table(mytable, 1)
# You can generate marginal proportions (tables of proportions )
prop.table(mytable, 1)
# For column sums and column proportions, you have
margin.table(mytable, 2)
prop.table(mytable, 2)
# Cell proportions are obtained with this statement
prop.table(mytable)
# You can use the addmargins() function to add marginal sums to these tables
addmargins(mytable)
addmargins(prop.table(mytable))
# When using addmargins(), the default is to create sum margins for all variables in a table.
# In contrast: adds a sum column alone
addmargins(prop.table(mytable, 1), 2)
addmargins(prop.table(mytable, 2), 1)
mytable <- xtabs(~ Treatment+Sex+Improved, data=Arthritis)
library(vcd)
head(Arthritis)
mytable <- xtabs(~ Treatment+Sex+Improved, data=Arthritis)
mytable
mytable <- xtabs(~ Treatment+Sex, data=Arthritis)
mytable
Arthritis
mytable <- xtabs(~Treatment+Improved, data=Arthritis)
chisq.test(mytable)
